#!/usr/bin/env python3
"""
Dynamic API Endpoint Server - Provides a dynamic list of REST endpoints from FastAPI code and allows calling any endpoint.
Version: 1.0
Generated by MCP Server Creator on 2025-09-18
"""

from fastmcp import FastMCP, Context
import asyncio
import os
import re
import requests

# Initialize the MCP server
mcp = FastMCP(
    "Dynamic API Endpoint Server",
    instructions="""Provides a dynamic list of REST endpoints from FastAPI code and allows calling any endpoint."""
)

@mcp.tool()
def call_endpoint(method: str, path: str, payload: dict = {}):
    """Calls any REST endpoint found in the FastAPI code by specifying method, path, and optional payload."""
    base_url = 'http://localhost:8000'  # Adjust if needed
    url = f'{base_url}{path}'
    method = method.lower()
    if method == 'get':
        response = requests.get(url, params=payload)
    elif method == 'post':
        response = requests.post(url, json=payload)
    elif method == 'put':
        response = requests.put(url, json=payload)
    elif method == 'delete':
        response = requests.delete(url, json=payload)
    elif method == 'patch':
        response = requests.patch(url, json=payload)
    else:
        return {'error': 'Unsupported method'}
    return {'status_code': response.status_code, 'body': response.json() if response.content else None}

@mcp.resource("endpoints://list")
def get_endpoints_list():
    """Returns a dynamic list of REST endpoints and their arguments from the FastAPI OpenAPI spec."""
    openapi_url = 'http://localhost:8000/openapi.json'
    try:
        response = requests.get(openapi_url)
        response.raise_for_status()
        openapi = response.json()
    except Exception as e:
        return {'error': f'Failed to fetch OpenAPI spec: {e}'}

    endpoints = []
    paths = openapi.get('paths', {})
    for path, methods in paths.items():
        for method, details in methods.items():
            method_upper = method.upper()
            if method_upper in {'GET', 'POST', 'PUT', 'DELETE', 'PATCH'}:
                params = details.get('parameters', [])
                args = [p.get('name') for p in params if 'name' in p]
                endpoints.append({
                    'method': method_upper,
                    'path': path,
                    'arguments': args
                })
    return endpoints

if __name__ == "__main__":
    mcp.run()
